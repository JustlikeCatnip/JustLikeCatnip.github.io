<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CunTian的咖啡屋</title>
  
  <subtitle>CunTianの咖啡屋</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-02-28T06:51:00.731Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cappuccino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MetaFac——数字工厂案例展示</title>
    <link href="http://example.com/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/"/>
    <id>http://example.com/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/</id>
    <published>2024-02-27T11:24:00.000Z</published>
    <updated>2024-02-28T06:51:00.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a><strong>项目架构</strong></h2><p><strong>1.前端（基于vue.js开发）</strong></p><p><strong>2.后端 （基于springboot、tomcat开发）</strong></p><p><strong>3.数据库（基于MySQL数据库）</strong></p><p><strong>4.可视化模块（基于three.js开发）</strong></p><p><strong>5.框架使用（JeecgBoot、FineReport）</strong></p><p>展示效果示例:</p><p><strong>前端架构图</strong></p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84.png"></p><p><strong>后端架构图</strong></p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84.png"></p><p><strong>案例模型核心模块</strong></p><p>样例模型：</p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E6%A0%B7%E4%BE%8B%E6%A8%A1%E5%9E%8B.png"></p><p>实际模拟搭建效果：</p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E5%A4%A7%E5%B1%8F%E6%90%AD%E5%BB%BA%E6%95%88%E6%9E%9C.png"></p><p>!(MetaFac数字工厂/案例模型模块_2.png)</p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E6%A1%88%E4%BE%8B%E6%A8%A1%E5%9E%8B%E6%A8%A1%E5%9D%97_2.png"></p><p><strong>可视化数字大屏</strong></p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/%E6%95%B0%E5%AD%97%E5%8C%96%E5%A4%A7%E5%B1%8F.gif"></p><p>AGV设备运输模拟：</p><p><img src="/2024/02/27/MetaFac%E6%95%B0%E5%AD%97%E5%B7%A5%E5%8E%82/AGV%E8%BF%90%E8%BE%93%E6%A8%A1%E6%8B%9F.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目架构&quot;&gt;&lt;a href=&quot;#项目架构&quot; class=&quot;headerlink&quot; title=&quot;项目架构&quot;&gt;&lt;/a&gt;&lt;strong&gt;项目架构&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.前端（基于vue.js开发）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;str</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Three.js" scheme="http://example.com/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>element-admin源码解读(Store)</title>
    <link href="http://example.com/2024/02/25/element-admin%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://example.com/2024/02/25/element-admin%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</id>
    <published>2024-02-25T05:30:29.000Z</published>
    <updated>2024-02-27T15:31:13.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Store模块源码分析"><a href="#Store模块源码分析" class="headerlink" title="Store模块源码分析"></a>Store模块源码分析</h2><hr><h4 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h4><p><img src="/2024/02/25/element-admin%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/menu.png"></p><p>​    首先让我们来看一下目录，在本系统中<strong>Store</strong>主要用于存储一些<u>全局的共享参数</u>，包括<strong>应用参数（app.js）、错误日志（errorLog.js）、鉴权信息（permission.js）、系统设置（setting.js）、面包屑导航（tagsView.js）、用户信息（user.js）</strong></p><hr><h3 id="数据的存储："><a href="#数据的存储：" class="headerlink" title="数据的存储："></a>数据的存储：</h3><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sidebar</span>: &#123;</span><br><span class="line">    <span class="attr">opened</span>: Cookies.get(<span class="string">&#x27;sidebarStatus&#x27;</span>) ? !!+Cookies.get(<span class="string">&#x27;sidebarStatus&#x27;</span>) : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">withoutAnimation</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">device</span>: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">  <span class="attr">size</span>: Cookies.get(<span class="string">&#x27;size&#x27;</span>) || <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">TOGGLE_SIDEBAR</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    state.sidebar.opened = !state.sidebar.opened</span><br><span class="line">    state.sidebar.withoutAnimation = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (state.sidebar.opened) &#123;</span><br><span class="line">      Cookies.set(<span class="string">&#x27;sidebarStatus&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Cookies.set(<span class="string">&#x27;sidebarStatus&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">CLOSE_SIDEBAR</span>: <span class="function">(<span class="params">state, withoutAnimation</span>) =&gt;</span> &#123;</span><br><span class="line">    Cookies.set(<span class="string">&#x27;sidebarStatus&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    state.sidebar.opened = <span class="literal">false</span></span><br><span class="line">    state.sidebar.withoutAnimation = withoutAnimation</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">TOGGLE_DEVICE</span>: <span class="function">(<span class="params">state, device</span>) =&gt;</span> &#123;</span><br><span class="line">    state.device = device</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_SIZE</span>: <span class="function">(<span class="params">state, size</span>) =&gt;</span> &#123;</span><br><span class="line">    state.size = size</span><br><span class="line">    Cookies.set(<span class="string">&#x27;size&#x27;</span>, size)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">toggleSideBar</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;TOGGLE_SIDEBAR&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">closeSideBar</span>(<span class="params">&#123; commit &#125;, &#123; withoutAnimation &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;CLOSE_SIDEBAR&#x27;</span>, withoutAnimation)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">toggleDevice</span>(<span class="params">&#123; commit &#125;, device</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;TOGGLE_DEVICE&#x27;</span>, device)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setSize</span>(<span class="params">&#123; commit &#125;, size</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;SET_SIZE&#x27;</span>, size)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>首先在头部引入网页Cookies工具类，用于后续进行cookies操作</li><li>state中配置三个参数<ul><li><em>sidebar</em>（侧边栏）<ul><li>opened（控制开关状态)：主要使用<strong>Cookies</strong>来记录侧边栏的开关状态</li><li><strong>!!</strong>   能够强制转换后续表达式返回值为boolean避免数据类型不一致的问题,例如undefined-&gt;false,null-&gt;false</li><li><strong>+</strong>   则进行字符串的自动转换</li><li>withoutAnimation（控制收缩动画）</li></ul></li><li>device（设备类型）</li><li>size（界面字体尺寸）</li></ul></li></ul><h4 id="errorLog-js"><a href="#errorLog-js" class="headerlink" title="errorLog.js"></a>errorLog.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">logs</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">ADD_ERROR_LOG</span>: <span class="function">(<span class="params">state, log</span>) =&gt;</span> &#123;</span><br><span class="line">    state.logs.push(log)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">CLEAR_ERROR_LOG</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.logs.splice(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">addErrorLog</span>(<span class="params">&#123; commit &#125;, log</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;ADD_ERROR_LOG&#x27;</span>, log)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">clearErrorLog</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;CLEAR_ERROR_LOG&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>logs数组用于存储每次产生的错误日志</u></p><h4 id="permission-js"><a href="#permission-js" class="headerlink" title="permission.js"></a>permission.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; asyncRoutes, constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Use meta.role to determine if the current user has permission</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">roles</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">route</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">roles, route</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    <span class="keyword">return</span> roles.some(<span class="function"><span class="params">role</span> =&gt;</span> route.meta.roles.includes(role))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter asynchronous routing tables by recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>routes asyncRoutes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">roles</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRoutes</span>(<span class="params">routes, roles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line"></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRoutes(tmp.children, roles)</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">routes</span>: [],</span><br><span class="line">  <span class="attr">addRoutes</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_ROUTES</span>: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">    state.addRoutes = routes</span><br><span class="line">    state.routes = constantRoutes.concat(routes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">generateRoutes</span>(<span class="params">&#123; commit &#125;, roles</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> accessedRoutes</span><br><span class="line">      <span class="keyword">if</span> (roles.includes(<span class="string">&#x27;admin&#x27;</span>)) &#123;</span><br><span class="line">        accessedRoutes = asyncRoutes || []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)</span><br><span class="line">      &#125;</span><br><span class="line">      commit(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">      resolve(accessedRoutes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先引入静态路由和动态路由</p><ul><li><strong>AcyncRouters：所有路由</strong></li><li><strong>ConstantRouters：静态路由</strong></li></ul></li><li><p><strong>hasPermisson（）</strong>： 传入<strong>角色</strong>和<strong>某个路由</strong>，判断该角色是否<strong>有使用该路由的权限</strong></p></li><li><p><strong>filterAsyncRoutes（）</strong>：传入<strong>角色</strong>和<strong>所有路由</strong>，过滤掉所有无权的路由，返回<strong>该用户的路由数组</strong></p></li><li><p><strong>generateRoutes（）</strong>：回调函数，传入<strong>角色</strong>，执行过滤方法和设置路由方法，将最终路由持久化保存在state的routes数组中，该权限下的额外路由添加在state的addRoutes数组中</p></li></ul><h4 id="setting-js"><a href="#setting-js" class="headerlink" title="setting.js"></a>setting.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> variables <span class="keyword">from</span> <span class="string">&#x27;@/styles/element-variables.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> defaultSettings <span class="keyword">from</span> <span class="string">&#x27;@/settings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; showSettings, tagsView, fixedHeader, sidebarLogo &#125; = defaultSettings</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">theme</span>: variables.theme,</span><br><span class="line">  <span class="attr">showSettings</span>: showSettings,</span><br><span class="line">  <span class="attr">tagsView</span>: tagsView,</span><br><span class="line">  <span class="attr">fixedHeader</span>: fixedHeader,</span><br><span class="line">  <span class="attr">sidebarLogo</span>: sidebarLogo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">CHANGE_SETTING</span>: <span class="function">(<span class="params">state, &#123; key, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-prototype-builtins</span></span><br><span class="line">    <span class="keyword">if</span> (state.hasOwnProperty(key)) &#123;</span><br><span class="line">      state[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">changeSetting</span>(<span class="params">&#123; commit &#125;, data</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;CHANGE_SETTING&#x27;</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>首先引入全局css样式和默认配置文件</li><li>设置state参数<strong>theme|showSettings|tagsView|tagsView|fixedHeader|sidebarLogo</strong></li></ul><h4 id="tagsView-js"><a href="#tagsView-js" class="headerlink" title="tagsView.js"></a>tagsView.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">visitedViews</span>: [],</span><br><span class="line">  <span class="attr">cachedViews</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">ADD_VISITED_VIEW</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.visitedViews.some(<span class="function"><span class="params">v</span> =&gt;</span> v.path === view.path)) <span class="keyword">return</span></span><br><span class="line">    state.visitedViews.push(</span><br><span class="line">      <span class="built_in">Object</span>.assign(&#123;&#125;, view, &#123;</span><br><span class="line">        <span class="attr">title</span>: view.meta.title || <span class="string">&#x27;no-name&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ADD_CACHED_VIEW</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.cachedViews.includes(view.name)) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (!view.meta.noCache) &#123;</span><br><span class="line">      state.cachedViews.push(view.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">DEL_VISITED_VIEW</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [i, v] <span class="keyword">of</span> state.visitedViews.entries()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v.path === view.path) &#123;</span><br><span class="line">        state.visitedViews.splice(i, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DEL_CACHED_VIEW</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = state.cachedViews.indexOf(view.name)</span><br><span class="line">    index &gt; -<span class="number">1</span> &amp;&amp; state.cachedViews.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">DEL_OTHERS_VISITED_VIEWS</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    state.visitedViews = state.visitedViews.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> v.meta.affix || v.path === view.path</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DEL_OTHERS_CACHED_VIEWS</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = state.cachedViews.indexOf(view.name)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      state.cachedViews = state.cachedViews.slice(index, index + <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// if index = -1, there is no cached tags</span></span><br><span class="line">      state.cachedViews = []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">DEL_ALL_VISITED_VIEWS</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// keep affix tags</span></span><br><span class="line">    <span class="keyword">const</span> affixTags = state.visitedViews.filter(<span class="function"><span class="params">tag</span> =&gt;</span> tag.meta.affix)</span><br><span class="line">    state.visitedViews = affixTags</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DEL_ALL_CACHED_VIEWS</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    state.cachedViews = []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">UPDATE_VISITED_VIEW</span>: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> state.visitedViews) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v.path === view.path) &#123;</span><br><span class="line">        v = <span class="built_in">Object</span>.assign(v, view)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">addView</span>(<span class="params">&#123; dispatch &#125;, view</span>)</span> &#123;</span><br><span class="line">    dispatch(<span class="string">&#x27;addVisitedView&#x27;</span>, view)</span><br><span class="line">    dispatch(<span class="string">&#x27;addCachedView&#x27;</span>, view)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">addVisitedView</span>(<span class="params">&#123; commit &#125;, view</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;ADD_VISITED_VIEW&#x27;</span>, view)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">addCachedView</span>(<span class="params">&#123; commit &#125;, view</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;ADD_CACHED_VIEW&#x27;</span>, view)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">delView</span>(<span class="params">&#123; dispatch, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;delVisitedView&#x27;</span>, view)</span><br><span class="line">      dispatch(<span class="string">&#x27;delCachedView&#x27;</span>, view)</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        <span class="attr">visitedViews</span>: [...state.visitedViews],</span><br><span class="line">        <span class="attr">cachedViews</span>: [...state.cachedViews]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delVisitedView</span>(<span class="params">&#123; commit, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_VISITED_VIEW&#x27;</span>, view)</span><br><span class="line">      resolve([...state.visitedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delCachedView</span>(<span class="params">&#123; commit, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_CACHED_VIEW&#x27;</span>, view)</span><br><span class="line">      resolve([...state.cachedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">delOthersViews</span>(<span class="params">&#123; dispatch, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;delOthersVisitedViews&#x27;</span>, view)</span><br><span class="line">      dispatch(<span class="string">&#x27;delOthersCachedViews&#x27;</span>, view)</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        <span class="attr">visitedViews</span>: [...state.visitedViews],</span><br><span class="line">        <span class="attr">cachedViews</span>: [...state.cachedViews]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delOthersVisitedViews</span>(<span class="params">&#123; commit, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_OTHERS_VISITED_VIEWS&#x27;</span>, view)</span><br><span class="line">      resolve([...state.visitedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delOthersCachedViews</span>(<span class="params">&#123; commit, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_OTHERS_CACHED_VIEWS&#x27;</span>, view)</span><br><span class="line">      resolve([...state.cachedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">delAllViews</span>(<span class="params">&#123; dispatch, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;delAllVisitedViews&#x27;</span>, view)</span><br><span class="line">      dispatch(<span class="string">&#x27;delAllCachedViews&#x27;</span>, view)</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        <span class="attr">visitedViews</span>: [...state.visitedViews],</span><br><span class="line">        <span class="attr">cachedViews</span>: [...state.cachedViews]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delAllVisitedViews</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_ALL_VISITED_VIEWS&#x27;</span>)</span><br><span class="line">      resolve([...state.visitedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delAllCachedViews</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;DEL_ALL_CACHED_VIEWS&#x27;</span>)</span><br><span class="line">      resolve([...state.cachedViews])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">updateVisitedView</span>(<span class="params">&#123; commit &#125;, view</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;UPDATE_VISITED_VIEW&#x27;</span>, view)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>visitedViews</strong>用于存储前几个父标签，<strong>cachedViews</strong>用于存储正在访问的当前标签</li><li><strong>visitedViews</strong>通过遍历的方式生成，主要方式是传入路由时，判断path是否一致，如果不一致则更新</li><li><strong>cachedViews</strong>通过indexOf函数查询并修改</li></ul><h4 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router, &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: getToken(),</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">introduction</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">roles</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.token = token</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_INTRODUCTION</span>: <span class="function">(<span class="params">state, introduction</span>) =&gt;</span> &#123;</span><br><span class="line">    state.introduction = introduction</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_NAME</span>: <span class="function">(<span class="params">state, name</span>) =&gt;</span> &#123;</span><br><span class="line">    state.name = name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_AVATAR</span>: <span class="function">(<span class="params">state, avatar</span>) =&gt;</span> &#123;</span><br><span class="line">    state.avatar = avatar</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_ROLES</span>: <span class="function">(<span class="params">state, roles</span>) =&gt;</span> &#123;</span><br><span class="line">    state.roles = roles</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">        commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.token)</span><br><span class="line">        setToken(data.token)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get user info</span></span><br><span class="line">  <span class="function"><span class="title">getInfo</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      getInfo(state.token).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">          reject(<span class="string">&#x27;Verification failed, please Login again.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; roles, name, avatar, introduction &#125; = data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// roles must be a non-empty array</span></span><br><span class="line">        <span class="keyword">if</span> (!roles || roles.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          reject(<span class="string">&#x27;getInfo: roles must be a non-null array!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;SET_ROLES&#x27;</span>, roles)</span><br><span class="line">        commit(<span class="string">&#x27;SET_NAME&#x27;</span>, name)</span><br><span class="line">        commit(<span class="string">&#x27;SET_AVATAR&#x27;</span>, avatar)</span><br><span class="line">        commit(<span class="string">&#x27;SET_INTRODUCTION&#x27;</span>, introduction)</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user logout</span></span><br><span class="line">  <span class="function"><span class="title">logout</span>(<span class="params">&#123; commit, state, dispatch &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      logout(state.token).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        commit(<span class="string">&#x27;SET_ROLES&#x27;</span>, [])</span><br><span class="line">        removeToken()</span><br><span class="line">        resetRouter()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reset visited views and cached views</span></span><br><span class="line">        <span class="comment">// to fixed https://github.com/PanJiaChen/vue-element-admin/issues/2485</span></span><br><span class="line">        dispatch(<span class="string">&#x27;tagsView/delAllViews&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove token</span></span><br><span class="line">  <span class="function"><span class="title">resetToken</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      commit(<span class="string">&#x27;SET_ROLES&#x27;</span>, [])</span><br><span class="line">      removeToken()</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dynamically modify permissions</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">changeRoles</span>(<span class="params">&#123; commit, dispatch &#125;, role</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = role + <span class="string">&#x27;-token&#x27;</span></span><br><span class="line"></span><br><span class="line">    commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, token)</span><br><span class="line">    setToken(token)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> dispatch(<span class="string">&#x27;getInfo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    resetRouter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate accessible routes map based on roles</span></span><br><span class="line">    <span class="keyword">const</span> accessRoutes = <span class="keyword">await</span> dispatch(<span class="string">&#x27;permission/generateRoutes&#x27;</span>, roles, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// dynamically add accessible routes</span></span><br><span class="line">    router.addRoutes(accessRoutes)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset visited views and cached views</span></span><br><span class="line">    dispatch(<span class="string">&#x27;tagsView/delAllViews&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>首先引入几个模块：<strong>user的API接口请求函数</strong>、<strong>token的配置函数</strong>、<strong>路由的配置函数</strong></li><li>主要存储state参数为：<strong>用户信息相关参数（name、avatar、introduction）</strong>、<strong>鉴权token</strong>、<strong>角色roles数组</strong></li><li>主要功能需要更新用户信息并持久化存储至全局，调用方法<strong>配置用户信息</strong>，生成<strong>token</strong>，调用获取<strong>用户信息的API</strong>以取得用户<strong>角色</strong>，并调用<strong>路由的配置函数（先前配置的）</strong>来生成动态路由。</li></ul><hr><h3 id="数据的获取："><a href="#数据的获取：" class="headerlink" title="数据的获取："></a>数据的获取：</h3><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.sidebar,</span><br><span class="line">  <span class="attr">size</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.size,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.app.device,</span><br><span class="line">  <span class="attr">visitedViews</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.tagsView.visitedViews,</span><br><span class="line">  <span class="attr">cachedViews</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.tagsView.cachedViews,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.token,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.avatar,</span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.name,</span><br><span class="line">  <span class="attr">introduction</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.introduction,</span><br><span class="line">  <span class="attr">roles</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.user.roles,</span><br><span class="line">  <span class="attr">permission_routes</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.permission.routes,</span><br><span class="line">  <span class="attr">errorLogs</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.errorLog.logs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure><p>由于获取数据的方式都大同小异。因此，设置通用getter类来获取全部state参数。</p><hr><h3 id="Store的生成："><a href="#Store的生成：" class="headerlink" title="Store的生成："></a>Store的生成：</h3><p>将store初始化配置在Vuex，进行模块化管理，以下是代码展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://webpack.js.org/guides/dependency-management/#requirecontext</span></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// you do not need `import app from &#x27;./modules/app&#x27;`</span></span><br><span class="line"><span class="comment">// it will auto require all vuex module from modules file</span></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = modulesFiles(modulePath)</span><br><span class="line">  modules[moduleName] = value.default</span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><hr><h3 id="全局调用Store："><a href="#全局调用Store：" class="headerlink" title="全局调用Store："></a>全局调用Store：</h3><p>​    最后直接在js中调用更新store即可,以<strong>用户登录</strong>为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;user/login&#x27;</span>, <span class="built_in">this</span>.loginForm);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Store模块源码分析&quot;&gt;&lt;a href=&quot;#Store模块源码分析&quot; class=&quot;headerlink&quot; title=&quot;Store模块源码分析&quot;&gt;&lt;/a&gt;Store模块源码分析&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;目录：&quot;&gt;&lt;a href=&quot;#目录：&quot; clas</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="源码分析" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Express中间件与Router</title>
    <link href="http://example.com/2024/02/24/Express%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8ERouter/"/>
    <id>http://example.com/2024/02/24/Express%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8ERouter/</id>
    <published>2024-02-24T07:47:51.000Z</published>
    <updated>2024-02-27T15:31:49.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Router模块"><a href="#Router模块" class="headerlink" title="Router模块"></a>Router模块</h3><hr><ul><li>模块化搭建（与Vue类似）</li><li>先引入router模块，挂载到具体路由，在通过export抛出</li><li>最后在app上注册全局注册</li></ul><p><em>router</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载具体的路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Get user list!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Add new user!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//抛出路由对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><em>app</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局中间件模块（例如路由）</span></span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, userRouter)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">1000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;http://127.0.0.1:1000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>测试</em></p><p><img src="/2024/02/24/Express%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8ERouter/router.png"></p><hr><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><ul><li>中间件相当与全局（或局部）定义的拦截器,作用于客户端发起请求<ul><li>这里我们首先定义一个最简单的中间件，并将其注册到app上</li><li>最后测试</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个最简单的中间件</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;中间件已启动&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> time = <span class="built_in">Date</span>.now();</span><br><span class="line">    req.startTime = time;</span><br><span class="line">    <span class="comment">//把流传关系，转交给下一个中间件或路由</span></span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server running in http://127.0.0.1:8080&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;调用了/路由&#x27;</span> + <span class="string">&#x27;时间是&#x27;</span> + req.startTime);</span><br><span class="line">    res.send(<span class="string">&#x27;Home Page&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;调用了/user路由&#x27;</span> + <span class="string">&#x27;时间是&#x27;</span> + req.startTime);</span><br><span class="line">    res.send(<span class="string">&#x27;User Page&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注意：可以使用 app.use0 连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行</em></p><hr><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><ul><li>不使用app.use全局注册的中间件,即为局部中间件</li><li>可以使用连续多个局部中间件,注意尾部加next()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mw1 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是第一个中间件&quot;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mw2 = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是第二个中间件&quot;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&quot;User Page&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server running in http://127.0.0.1:8080&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="中间件使用注意事项"><a href="#中间件使用注意事项" class="headerlink" title="中间件使用注意事项:"></a>中间件使用注意事项:</h2><ol><li>一定要在路由之前注册中间件</li><li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li><li>执行完中间件的业务代码之后，不要忘记调用 next0 函数</li><li>为了防止代码逻辑混乱，调用 next0 函数后不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间，共享req和res 对象</li></ol><p><strong>其它特殊中间件:</strong></p><ul><li>路由中间件(绑定到 express.Router0 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别)</li><li>错误中间件(形参四个参数(err,req,res,next))</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&quot;User Page&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意 错误中间件一般放置所有路由之后，用于捕获整个项目的错误异常</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error happend!&quot;</span> + err.message);</span><br><span class="line">    res.send(<span class="string">&#x27;error:&#x27;</span> + err.message);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>express内置中间件<ul><li>express.static 快速托管静态资源的内置中间件，例如: HTML 文件、图片、CSS 样式等(无兼容性)</li><li>express.json 解析 JSON 格式的请求体数据(有兼容性，仅在 4.16.0+ 版本中可用)</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据(有兼容性，仅在 4.16.0+ 版本中可用)</li></ul></li><li>第三方中间件<ul><li>npm install XXX</li><li>require </li><li>app.use()</li></ul></li></ul><hr><h3 id="qs模块-现在弃用-改为URLSearchParams"><a href="#qs模块-现在弃用-改为URLSearchParams" class="headerlink" title="qs模块(现在弃用,改为URLSearchParams)"></a>qs模块(现在弃用,改为URLSearchParams)</h3><ul><li>Node.js 内置了一个 querystring 模块，专门用来处理查询字符串。通过这个模块提供的 parse0) 函数，可以轻松把查询字符串，解析成对象的格式。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;URLSearchParams&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;body=&#x27;</span>+qs.parse(result));</span><br></pre></td></tr></table></figure><p><em>注意:为了优化项目结构,我们可以把自定义的中间件函数，封装为独立的模块，示例代码如下:</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;URLSearchParams&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bodyParser</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 省略其它代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = bodyParser;</span><br><span class="line"><span class="comment">/*分割线*/</span></span><br><span class="line">其它js中直接通过<span class="built_in">require</span>调用</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Router模块&quot;&gt;&lt;a href=&quot;#Router模块&quot; class=&quot;headerlink&quot; title=&quot;Router模块&quot;&gt;&lt;/a&gt;Router模块&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;模块化搭建（与Vue类似）&lt;/li&gt;
&lt;li&gt;先引入router模块，</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>docker入门及配置</title>
    <link href="http://example.com/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/</id>
    <published>2024-02-04T11:02:49.000Z</published>
    <updated>2024-02-27T15:31:54.991Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h4><p><img src="/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/docker.png"></p><p>Docker是一个开源的应用容器引擎，它基于go语言开发，并遵从Apache2.0开源协议。使用Docker可以让开发者封装他们的应用以及依赖包到一个可移植的容器中，然后发布到任意的 Linux 机器上，也可以实现虚拟化。Docker 容器完全使用沙箱机制，相互之间不会有任何接口，这保证了容器之间的安全性。</p><hr><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><ul><li><p>yum包更新到最新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装docker,出现输入的界面都按y</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure></li><li><p>查看docker版本，验证是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><strong>备注</strong>：</p><p><u>执行 yum install -y docker-ce 报错：</u><br><u>failure: repodata/repomd.xml from docker-ce-stable: 【Errno 256】 No more mirrors to try.</u><br><u>解决办法：</u><br><u>执行 vim /etc/yum.repos.d/docker-ce.repo，把第一个baseurl中的$releasever改成7，然后保存退出重新安装即可</u></p></li></ul><hr><h4 id="镜像加速器配置"><a href="#镜像加速器配置" class="headerlink" title="镜像加速器配置:"></a>镜像加速器配置:</h4><p>若docker镜像仓库下载较慢，可使用一些国内的镜像加速器，如阿里云、腾讯云等。</p><p><img src="/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8.png"></p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h4><ul><li><p>docker 启动/关闭/重启 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start/stop/restart docker</span><br></pre></td></tr></table></figure></li><li><p>查看docker进程状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></li><li><p>开机启动docker进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作:"></a>镜像操作:</h4><ul><li><p>查看镜像（所有）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -q # 查看所用镜像的id</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像（从docker hub仓库中查找）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search XXX #镜像名称</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像（从docker仓库中下载镜像到本地）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull XXX #镜像名称</span><br></pre></td></tr></table></figure></li><li><p>删除镜像（删除本地）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi xxxxx #删除指定id的镜像</span><br><span class="line">docker rmi &#x27;docker images -q&#x27; #删除所有本地镜像</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作:"></a>容器操作:</h4><ul><li><p>创建并启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run 参数</span><br><span class="line">-i #保持容器运行，通常与-t同时使用，加入-i-t这两个参数后，容器创建后会自动进入，退出容器后，容器自动关闭</span><br><span class="line">-t #为容器重新分配一个为输入终端，通常与-i同时使用</span><br><span class="line">-d #以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker exec进入容器。退出后，容器不会关闭。</span><br><span class="line">-it #创建的容器一般称为交互式容器。</span><br><span class="line">-id #创建的容器一般称为守护式容器。</span><br><span class="line">--name #为创建的容器命名</span><br></pre></td></tr></table></figure></li><li><p>查看容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps #查看正在运行的容器</span><br><span class="line">docker ps -a #查看所有容器</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec xxx #退出容器，容器不会关闭</span><br></pre></td></tr></table></figure></li><li><p>停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop xxx </span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start xxx </span><br></pre></td></tr></table></figure></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能进行删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm xxx </span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect xxx </span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Docker数据卷："><a href="#Docker数据卷：" class="headerlink" title="Docker数据卷："></a>Docker数据卷：</h4><p><img src="/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/docker%E6%95%B0%E6%8D%AE%E5%8D%B7.png"></p><h5 id="配置数据卷："><a href="#配置数据卷：" class="headerlink" title="配置数据卷："></a>配置数据卷：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ... -v 宿主机目录:容器内目录 ...</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>目录必须是绝对路径</li><li>如果目录不存在，会自动创建</li><li>可以挂载多个数据卷</li><li>多个容器可以指定一个数据卷，以此实现容器间数据的双向绑定</li></ol><h5 id="容器数据卷："><a href="#容器数据卷：" class="headerlink" title="容器数据卷："></a>容器数据卷：</h5><p><img src="/2024/02/04/docker%E5%85%A5%E9%97%A8%E5%8F%8A%E9%85%8D%E7%BD%AE/docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7.png"></p><hr><h4 id="应用部署："><a href="#应用部署：" class="headerlink" title="应用部署："></a>应用部署：</h4><h5 id="mysql5-7部署："><a href="#mysql5-7部署：" class="headerlink" title="mysql5.7部署："></a>mysql5.7部署：</h5><ol><li><p>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br><span class="line"></span><br><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $pwd/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $pwd/logs:/logs \</span><br><span class="line">-v $pwd/data:/var/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是docker？&quot;&gt;&lt;a href=&quot;#什么是docker？&quot; class=&quot;headerlink&quot; title=&quot;什么是docker？&quot;&gt;&lt;/a&gt;什么是docker？&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2024/02/04/docker%E5%85%A5%</summary>
      
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs交互以及跨域问题</title>
    <link href="http://example.com/2024/02/03/Nodejs%E4%BA%A4%E4%BA%92%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/02/03/Nodejs%E4%BA%A4%E4%BA%92%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2024-02-03T11:13:53.000Z</published>
    <updated>2024-02-03T11:50:01.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nodejs跨域问题"><a href="#Nodejs跨域问题" class="headerlink" title="Nodejs跨域问题"></a>Nodejs跨域问题</h3><ul><li>使用CORS（主要）</li><li>使用Jsonp（只支持get请求）</li></ul><hr><h4 id="cors："><a href="#cors：" class="headerlink" title="cors："></a>cors：</h4><ul><li>npm install cors（安装cors中间件）</li><li>const cors = require(‘cors’)</li><li>调用 app.use(cors())配置中间件</li></ul><h4 id="Jsonp（具体实现）"><a href="#Jsonp（具体实现）" class="headerlink" title="Jsonp（具体实现）:"></a>Jsonp（具体实现）:</h4><ol><li>得到函数的名称</li><li>定义要发送的到客户端的数据对象</li><li>用模板字符串拼接出一个函数的调用</li><li>返回响应</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补充:jsonp实现 (本质利用了script的可跨域特性)</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> funcName = req.query.callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line"></span><br><span class="line">    res.send(scriptStr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Nodejs跨域问题&quot;&gt;&lt;a href=&quot;#Nodejs跨域问题&quot; class=&quot;headerlink&quot; title=&quot;Nodejs跨域问题&quot;&gt;&lt;/a&gt;Nodejs跨域问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用CORS（主要）&lt;/li&gt;
&lt;li&gt;使用Jsonp（只支持g</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>&#39;Nodejs:Express与Web开发&#39;</title>
    <link href="http://example.com/2024/01/26/Nodejs-Express%E4%B8%8EWeb%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2024/01/26/Nodejs-Express%E4%B8%8EWeb%E5%BC%80%E5%8F%91/</id>
    <published>2024-01-26T07:28:16.000Z</published>
    <updated>2024-02-02T08:57:40.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Express模块"><a href="#Express模块" class="headerlink" title="Express模块"></a>Express模块</h3><ul><li>express是基于Nodejs的用于快速搭建Web平台的包</li></ul><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用express创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务器，监听80端口</span></span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server running in http://127.0.0.1&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听客户端的Get和Post请求，向客户端响应具体内容</span></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//send()用于响应</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//send()用于响应</span></span><br><span class="line">    res.send(<span class="string">&quot;post succeed&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过req.query对象，访问到客户端发来的字符串参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过req.params对象，直接接收动态参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/user/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//直接将发过来的参数作为动态的id值，id就是这个参数的名字</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.params);</span><br><span class="line">    res.send(req.params);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/2024/01/26/Nodejs-Express%E4%B8%8EWeb%E5%BC%80%E5%8F%91/express.png"></p><p><em>注：多个参数</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/user/:id/:name&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(req.params);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/01/26/Nodejs-Express%E4%B8%8EWeb%E5%BC%80%E5%8F%91/express2.png"></p><hr><h4 id="express的静态资源"><a href="#express的静态资源" class="headerlink" title="express的静态资源"></a>express的静态资源</h4><p><img src="/2024/01/26/Nodejs-Express%E4%B8%8EWeb%E5%BC%80%E5%8F%91/express3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Express模块&quot;&gt;&lt;a href=&quot;#Express模块&quot; class=&quot;headerlink&quot; title=&quot;Express模块&quot;&gt;&lt;/a&gt;Express模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;express是基于Nodejs的用于快速搭建Web平台的包&lt;/li&gt;
</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js模块化</title>
    <link href="http://example.com/2024/01/26/Node-js%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://example.com/2024/01/26/Node-js%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2024-01-26T06:45:42.000Z</published>
    <updated>2024-02-03T11:51:44.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nodejs模块化处理"><a href="#Nodejs模块化处理" class="headerlink" title="Nodejs模块化处理"></a>Nodejs模块化处理</h3><hr><p>1.js中module对象的用法：</p><p><img src="/2024/01/26/Node-js%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96_1.png"></p><p>2.使用require()模块导入结果时,永远以<strong>module.exports指向的对象</strong>为准打印输出:</p><p><img src="/2024/01/26/Node-js%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96_2.png"></p><hr><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p><em>注:Nodejs提供了exports对象，默认情况下，exports和module.export指向同一个对象</em></p><ol><li><p>永远记得，require()永远得到的是module.exports指向的对象</p><p><img src="/2024/01/26/Node-js%E6%A8%A1%E5%9D%97%E5%8C%96/exports.png"></p></li><li><p>为了防止混乱，建议不要在一个项目中同时使用exports和module.exports</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Nodejs模块化处理&quot;&gt;&lt;a href=&quot;#Nodejs模块化处理&quot; class=&quot;headerlink&quot; title=&quot;Nodejs模块化处理&quot;&gt;&lt;/a&gt;Nodejs模块化处理&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;1.js中module对象的用法：&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>element多级菜单组件封装</title>
    <link href="http://example.com/2022/07/11/element%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    <id>http://example.com/2022/07/11/element%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/</id>
    <published>2022-07-11T09:20:00.000Z</published>
    <updated>2024-02-03T11:52:07.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="父组件的封装"><a href="#父组件的封装" class="headerlink" title="父组件的封装"></a>父组件的封装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;sidebar_box&quot;&gt;</span><br><span class="line">    &lt;el-radio-group v-model=&quot;isCollapse&quot; style=&quot;margin-bottom: 20px;&quot;&gt;</span><br><span class="line">      &lt;el-radio-button :label=&quot;false&quot;&gt;展开&lt;/el-radio-button&gt;</span><br><span class="line">      &lt;el-radio-button :label=&quot;true&quot;&gt;收起&lt;/el-radio-button&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-menu class=&quot;el-menu-vertical-demo box-content shadow-lg&quot; :collapse=&quot;isCollapse&quot;&gt;</span><br><span class="line">      &lt;SubMenu v-for=&quot;(item,index) in menuList&quot; :key=&quot;index&quot; :node=&quot;item&quot;&gt;&lt;/SubMenu&gt;</span><br><span class="line">    &lt;/el-menu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SubMenu from &quot;@/components/SubMenu.vue&quot;;</span><br><span class="line">import &#123; getRouterInfo &#125; from &quot;@/api/UserApi/loginApi&quot;;</span><br><span class="line">import &#123; getToken &#125; from &quot;@/utils/auth&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SideBar&quot;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isCollapse: false,</span><br><span class="line">      menuList: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="模板数据"><a href="#模板数据" class="headerlink" title="模板数据"></a>模板数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">menuList: [</span><br><span class="line">        &#123;</span><br><span class="line">          index: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          hasChildren: <span class="literal">false</span>,</span><br><span class="line">          name: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">          path: <span class="string">&quot;/Home&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;el-icon-location&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          index: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">          hasChildren: <span class="literal">false</span>,</span><br><span class="line">          name: <span class="string">&quot;楼宇管理&quot;</span>,</span><br><span class="line">          path: <span class="string">&quot;/BuildingManagement&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;el-icon-office-building&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          index: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">          hasChildren: <span class="literal">false</span>,</span><br><span class="line">          name: <span class="string">&quot;设备管理&quot;</span>,</span><br><span class="line">          path: <span class="string">&quot;/EquipmentManagement&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;el-icon-s-platform&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          index: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">          hasChildren: <span class="literal">true</span>,</span><br><span class="line">          name: <span class="string">&quot;门禁管理&quot;</span>,</span><br><span class="line">          path: <span class="string">&quot;/AccessManagement&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;el-icon-s-tools&quot;</span>,</span><br><span class="line">          childrenList: [</span><br><span class="line">            &#123;</span><br><span class="line">              index: <span class="string">&quot;4-1&quot;</span>,</span><br><span class="line">              hasChildren: <span class="literal">false</span>,</span><br><span class="line">              name: <span class="string">&quot;门禁控制&quot;</span>,</span><br><span class="line">              path: <span class="string">&quot;/AccessControl&quot;</span>,</span><br><span class="line">              icon: <span class="string">&quot;el-icon-coordinate&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              index: <span class="string">&quot;4-2&quot;</span>,</span><br><span class="line">              hasChildren: <span class="literal">false</span>,</span><br><span class="line">              name: <span class="string">&quot;历史记录&quot;</span>,</span><br><span class="line">              path: <span class="string">&quot;/AccessHistory&quot;</span>,</span><br><span class="line">              icon: <span class="string">&quot;el-icon-document&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br></pre></td></tr></table></figure><ul><li><p>父组件需要判断数组数据是否含有子元素</p></li><li><p>若有子元素则需要调用多级菜单<strong>el-submenu</strong></p><hr></li></ul><h3 id="子组件引入"><a href="#子组件引入" class="headerlink" title="子组件引入"></a>子组件引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SubMenu <span class="keyword">from</span> <span class="string">&quot;@/components/SubMenu.vue&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="子组件结构"><a href="#子组件结构" class="headerlink" title="子组件结构"></a>子组件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;menu_box&quot;&gt;</span><br><span class="line">    &lt;el-menu-item v-if=&quot;node.children==null||node.children.length==0&quot; :index=&quot;node.name&quot;&gt;</span><br><span class="line">      &lt;i :class=&quot;node.meta.iconCls&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;router-link :to=&quot;node.path&quot; class=&quot;router_click&quot;&gt;&#123;&#123;node.meta.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-submenu v-else :index=&quot;node.name&quot;&gt;</span><br><span class="line">      &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class=&quot;node.meta.iconCls&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot; class=&quot;router_click&quot;&gt;&#123;&#123;node.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;el-menu-item-group&gt;</span><br><span class="line">        &lt;SubMenu v-for=&quot;(item,index) in node.children&quot; :key=&quot;index&quot; :node=&quot;item&quot; :index=&quot;node.name&quot;&gt;&lt;/SubMenu&gt;</span><br><span class="line">      &lt;/el-menu-item-group&gt;</span><br><span class="line">    &lt;/el-submenu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SubMenu&quot;,</span><br><span class="line">  props: [&quot;node&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>子组件与父组件结构类似同样需要进行判断</li><li>不同之处在于子组件需要自身嵌套</li><li>另外一点是子组件需要接收父组件发送的有子元素的数据的信息，通过props接收</li></ul><h3 id="接收子组件参数"><a href="#接收子组件参数" class="headerlink" title="接收子组件参数"></a>接收子组件参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: &quot;SubMenu&quot;,</span><br><span class="line">props: [&quot;node&quot;]</span><br></pre></td></tr></table></figure><h3 id="自身调用"><a href="#自身调用" class="headerlink" title="自身调用"></a>自身调用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu-item-group&gt;</span><br><span class="line">    &lt;SubMenu v-for=&quot;(item,index) in node.children&quot; :key=&quot;index&quot; :node=&quot;item&quot; :index=&quot;node.name&quot;&gt;&lt;/SubMenu&gt;</span><br><span class="line">&lt;/el-menu-item-group&gt;</span><br></pre></td></tr></table></figure><ul><li>组件调用自身不需要引入，直接使用同name作为标签即可</li></ul><h4 id="下面是效果图，模板数据为上文给出的："><a href="#下面是效果图，模板数据为上文给出的：" class="headerlink" title="下面是效果图，模板数据为上文给出的："></a>下面是效果图，模板数据为上文给出的：</h4><p><img src="/2022/07/11/element%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/%E8%8F%9C%E5%8D%95%E5%B0%81%E8%A3%85.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;父组件的封装&quot;&gt;&lt;a href=&quot;#父组件的封装&quot; class=&quot;headerlink&quot; title=&quot;父组件的封装&quot;&gt;&lt;/a&gt;父组件的封装&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定及数据代理底层原理</title>
    <link href="http://example.com/2022/06/22/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8F%8A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/06/22/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8F%8A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2022-06-22T08:53:32.000Z</published>
    <updated>2022-06-22T09:13:06.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue双向绑定及数据代理底层原理"><a href="#Vue双向绑定及数据代理底层原理" class="headerlink" title="Vue双向绑定及数据代理底层原理"></a>Vue双向绑定及数据代理底层原理</h2><p>​    vue数据的双向绑定是通过数据劫持结合<strong>发布者-订阅者模式</strong>的方式来实现的。其核心就是通过<strong>Object.defineProperty()<strong>方法设置</strong>set</strong>和<strong>get</strong>函数来实现数据的劫持，在数据变化时发布消息给订阅者，触发相应的监听回调。也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；</p><h3 id="Object-defineProperty-方法"><a href="#Object-defineProperty-方法" class="headerlink" title="Object.defineProperty()方法"></a>Object.defineProperty()方法</h3><p>​    Object.defineProperty(obj, prop, descriptor) ，这个语法内有三个参数，分别为 obj （要定义其上属性的对象）； prop （要定义或修改的属性）； descriptor （具体的改变方法） 简单地说，就是用这个方法来定义一个值。当调用时我们使用了它里面的get方法。当给这个属性赋值时，就调用了它里面的set方法；</p><p><strong>具体实现：</strong></p><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> man = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(man, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">     <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//可枚举属性，默认值是false</span></span><br><span class="line">     <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//控制是否可被修改，默认值是false</span></span><br><span class="line">     <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//控制是否可被删除，默认值是false</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(man) <span class="comment">// &#123; name: &#x27;zhangsan&#x27;,sex: &#x27;男&#x27; , age:20 &#125;</span></span><br></pre></td></tr></table></figure><hr><p><strong>数据双向绑定 （数据响应式）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nowAge = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> man = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="comment">//age: 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(Object.keys(man)); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义对象的属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(man, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// value: Number,</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//可枚举属性，默认值是false</span></span><br><span class="line">    <span class="comment">// writable: true, //控制是否可被修改，默认值是false</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//控制是否可被删除，默认值是false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取man的age属性时，get函数(getter)就会被调用，且返回值就是age的值（双向绑定原理）</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;有人读取age属性叻&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> nowAge</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当有人修改man的age属性时，get函数(getter)就会被调用，且返回值就是age的值（双向绑定原理）</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;有人修改了age的值，现在值为：&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(man);</span><br></pre></td></tr></table></figure><hr><p><strong>Vue中的数据代理与劫持</strong></p><ol><li> <u>通过vm对象来代理data对象中属性的操作（读/写)</u></li><li><u>Vue中数据代理的好处：更加方便的操作data中的数据(响应式)</u></li><li><u>核心原理：通过object.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性,都指定一个getter/setter。在getter/setter内部去操作（读/写)data中对应的属性。</u></li></ol><hr><h3 id="示意图："><a href="#示意图：" class="headerlink" title="示意图："></a>示意图：</h3><p><img src="/2022/06/22/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8F%8A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.png"></p><p><img src="/2022/06/22/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8F%8A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86.png"></p><h3 id="关于Vue的双向绑定和数据代理就讲到这咯"><a href="#关于Vue的双向绑定和数据代理就讲到这咯" class="headerlink" title="关于Vue的双向绑定和数据代理就讲到这咯~~~"></a><u>关于Vue的双向绑定和数据代理就讲到这咯~~~</u></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue双向绑定及数据代理底层原理&quot;&gt;&lt;a href=&quot;#Vue双向绑定及数据代理底层原理&quot; class=&quot;headerlink&quot; title=&quot;Vue双向绑定及数据代理底层原理&quot;&gt;&lt;/a&gt;Vue双向绑定及数据代理底层原理&lt;/h2&gt;&lt;p&gt;​    vue数据的双向绑</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端知识点" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Three.js导入外部3D模型</title>
    <link href="http://example.com/2021/11/24/Three-js%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A83D%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2021/11/24/Three-js%E5%AF%BC%E5%85%A5%E5%A4%96%E9%83%A83D%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-11-24T08:44:00.000Z</published>
    <updated>2021-11-24T10:49:58.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先引入两个库"><a href="#首先引入两个库" class="headerlink" title="首先引入两个库"></a>首先引入两个库</h3><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://www.yanhuangxueyuan.com/threejs/examples/js/loaders/OBJLoader.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.yanhuangxueyuan.com/threejs/examples/js/loaders/MTLLoader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>THREE.MTLLoader()函数说明：</p><ul><li><code>mtlLoader.setBaseUrl()</code>：设置材质路径</li><li><code>mtlLoader.setPath()</code>：设置mtl文件所在路径</li><li><code>mtlLoader.load(filename,onSuccess(materials ),onProgress(xhr),onError(error))</code>：mtl文件名、 加载成功后回调处理(参数为生成的材质库)、加载过程中回调处理(xhr对象属性可计算出已完成加载百分比)、失败回调处理</li></ul><p>THREE.OBJLoader() 函数说明：</p><ul><li><code>objLoader.setMaterials( materials )</code>：设置obj使用的材质贴图</li><li><code>objLoader.setPath( options.objPath )</code>：设置obj文件所在路径</li><li><code>objLoader.load( filename,onSuccess(object ),onProgress(xhr),onError(error))</code>：obj文件名、 加载成功后回调处理(参数为生成的三维对象)、加载过程中回调处理(xhr对象属性可计算出已完成加载百分比)、失败回调处理。</li></ul><p>在onSuccess(object ){}回调里我们可以对生成的三维对象做一些处理：对材质进行调色、设置透明度、设置贴图模式等，对设置旋转、缩放、位置摆放、自发光颜色、环境光颜色。<br>如果obj文件代表的三维对象是由多个子模型构成的模型组合，我们可以调用object.traverse(function(child){})来对每个子模型进行处理。<br>以下简单封装成一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMtlObj</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="comment">//      options=&#123;</span></span><br><span class="line"><span class="comment">//          mtlBaseUrl:&quot;&quot;,</span></span><br><span class="line"><span class="comment">//          mtlPath:&quot;&quot;,</span></span><br><span class="line"><span class="comment">//          mtlFileName:&quot;&quot;,</span></span><br><span class="line"><span class="comment">//          objPath:&quot;&quot;,</span></span><br><span class="line"><span class="comment">//          objFileName:&quot;&quot;,</span></span><br><span class="line"><span class="comment">//          completeCallback:function(object)&#123;  </span></span><br><span class="line"><span class="comment">//          &#125;</span></span><br><span class="line"><span class="comment">//          progress:function(persent)&#123;</span></span><br><span class="line"><span class="comment">//              </span></span><br><span class="line"><span class="comment">//          &#125;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line">    THREE.Loader.Handlers.add( <span class="regexp">/\.dds$/i</span>, <span class="keyword">new</span> THREE.DDSLoader() );</span><br><span class="line">    <span class="keyword">var</span> mtlLoader = <span class="keyword">new</span> THREE.MTLLoader();</span><br><span class="line">    mtlLoader.setBaseUrl( options.mtlBaseUrl );<span class="comment">//设置材质路径</span></span><br><span class="line">    mtlLoader.setPath( options.mtlPath );<span class="comment">//设置mtl文件路径</span></span><br><span class="line">    mtlLoader.load( options.mtlFileName, <span class="function"><span class="keyword">function</span>(<span class="params"> materials </span>) </span>&#123;</span><br><span class="line">        materials.preload();</span><br><span class="line">        <span class="keyword">var</span> objLoader = <span class="keyword">new</span> THREE.OBJLoader();</span><br><span class="line">        objLoader.setMaterials( materials );<span class="comment">//设置三维对象材质库</span></span><br><span class="line">        objLoader.setPath( options.objPath );<span class="comment">//设置obj文件所在目录</span></span><br><span class="line">        objLoader.load( options.objFileName, <span class="function"><span class="keyword">function</span> (<span class="params"> object </span>) </span>&#123;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> options.completeCallback==<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">                options.completeCallback(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"> xhr </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( xhr.lengthComputable ) &#123;</span><br><span class="line">                <span class="keyword">var</span> percentComplete = xhr.loaded / xhr.total * <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> options.progress ==<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">                    options.progress( <span class="built_in">Math</span>.round(percentComplete, <span class="number">2</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log( Math.round(percentComplete, 2) + &#x27;% downloaded&#x27; );</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">createMtlObj(&#123;</span><br><span class="line">    <span class="attr">mtlBaseUrl</span>:<span class="string">&quot;../resource/haven/&quot;</span>,</span><br><span class="line">    <span class="attr">mtlPath</span>: <span class="string">&quot;../resource/haven/&quot;</span>,</span><br><span class="line">    <span class="attr">mtlFileName</span>:<span class="string">&quot;threejs.mtl&quot;</span>,</span><br><span class="line">    <span class="attr">objPath</span>:<span class="string">&quot;../resource/haven/&quot;</span>,</span><br><span class="line">    <span class="attr">objFileName</span>:<span class="string">&quot;threejs.obj&quot;</span>,</span><br><span class="line">    <span class="attr">completeCallback</span>:<span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">        object.traverse(<span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123; </span><br><span class="line">            <span class="keyword">if</span> (child <span class="keyword">instanceof</span> THREE.Mesh) &#123; </span><br><span class="line">                child.material.side = THREE.DoubleSide;<span class="comment">//设置贴图模式为双面贴图</span></span><br><span class="line">                child.material.emissive.r=<span class="number">0</span>;<span class="comment">//设置rgb通道R通道颜色</span></span><br><span class="line">                child.material.emissive.g=<span class="number">0.01</span>;<span class="comment">//设置rgb通道G通道颜色</span></span><br><span class="line">                child.material.emissive.b=<span class="number">0.05</span>;<span class="comment">//设置rgb通道B通道颜色</span></span><br><span class="line">                child.material.transparent=<span class="literal">true</span>;<span class="comment">//材质允许透明</span></span><br><span class="line">                <span class="comment">//child.material.opacity=0;//材质默认透明度                        </span></span><br><span class="line">                <span class="comment">//child.material.shading=THREE.SmoothShading;//平滑渲染</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        object.emissive=<span class="number">0x00ffff</span>;<span class="comment">//自发光颜色</span></span><br><span class="line">        object.ambient=<span class="number">0x00ffff</span>;<span class="comment">//环境光颜色</span></span><br><span class="line"><span class="comment">//      object.rotation.x= 0;//x轴方向旋转角度</span></span><br><span class="line">        object.position.y = <span class="number">0</span>;<span class="comment">//位置坐标X</span></span><br><span class="line">        object.position.z = <span class="number">0</span>;<span class="comment">//位置坐标y</span></span><br><span class="line">        object.scale.x=<span class="number">1</span>;<span class="comment">//缩放级别</span></span><br><span class="line">        object.scale.y=<span class="number">1</span>;<span class="comment">//缩放级别</span></span><br><span class="line">        object.scale.z=<span class="number">1</span>;<span class="comment">//缩放级别</span></span><br><span class="line">        object.name=<span class="string">&quot;haven&quot;</span>;<span class="comment">//刚体名称</span></span><br><span class="line">        object.rotation.y=-<span class="built_in">Math</span>.PI;<span class="comment">//初始Y轴方向旋转角度</span></span><br><span class="line">        scene.add(object);<span class="comment">//添加到场景中</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">progress</span>:<span class="function"><span class="keyword">function</span>(<span class="params">persent</span>)</span>&#123;</span><br><span class="line">         </span><br><span class="line">        $(<span class="string">&quot;#havenloading .progress&quot;</span>).css(<span class="string">&quot;width&quot;</span>,persent+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;首先引入两个库&quot;&gt;&lt;a href=&quot;#首先引入两个库&quot; class=&quot;headerlink&quot; title=&quot;首先引入两个库&quot;&gt;&lt;/a&gt;首先引入两个库&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Three.js" scheme="http://example.com/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Springboot配置文件以及自动装配</title>
    <link href="http://example.com/2021/11/24/Springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://example.com/2021/11/24/Springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2021-11-24T04:22:00.000Z</published>
    <updated>2024-02-03T11:50:12.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-SpringBoot配置文件以及自动配置原理"><a href="#一-SpringBoot配置文件以及自动配置原理" class="headerlink" title="一.SpringBoot配置文件以及自动配置原理"></a>一.SpringBoot配置文件以及自动配置原理</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li>application.properties<ul><li>语法结构 ： key=value</li></ul></li><li>application.yml<ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；**<br>**</p><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种置标语言）的递归缩写。</p><p>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种置标语言）</p><p>YAML A Markup Language ：是一个标记语言</p><p>YAML isnot Markup Language ：不是一个标记语言</p><p><strong>标记语言</strong></p><p> 以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>yaml配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server：</span><br><span class="line">    prot: 8080</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;port&gt;8081&lt;port&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure><h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><p><strong>基础语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k:(空格) v   </span><br></pre></td></tr></table></figure><p>以此来表示一对键值对（空格不能省略）；以空格的缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>注意 ：属性和值的大小写都是十分敏感的。例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 8081</span><br><span class="line">    path: /hello</span><br></pre></td></tr></table></figure><h3 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a><strong>值的写法</strong></h3><p><strong>字面量：普通的值 [ 数字，布尔值，字符串 ]</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k: v</span><br></pre></td></tr></table></figure><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><p>“” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ： name: “kuang \n shen”  输出 ： kuang 换行  shen</p><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ： name: ‘kuang \n shen’  输出 ： kuang \n  shen</p><p><strong>对象、Map（键值对）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k: </span><br><span class="line">    v1:</span><br><span class="line">    v2:</span><br></pre></td></tr></table></figure><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student:</span><br><span class="line">    name: qinjiang</span><br><span class="line">    age: 3</span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student: &#123;name: qinjiang,age: 3&#125;</span><br></pre></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pets:</span><br><span class="line"> - cat</span><br><span class="line"> - dog</span><br><span class="line"> - pig</span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pets: [cat,dog,pig]</span><br></pre></td></tr></table></figure><h3 id="修改SpringBoot的默认端口号"><a href="#修改SpringBoot的默认端口号" class="headerlink" title="修改SpringBoot的默认端口号"></a>修改SpringBoot的默认端口号</h3><p> 配置文件中添加，端口号的参数，就可以切换端口；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><p><strong>1. 如果要使用properties配置文件可能导入时存在乱码现象 ， 需要在IDEA中进行调整 ， 我们这里直接使用yml文件 ， 将默认的 application.properties后缀修改为yml</strong> </p><p><strong><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728162138583-1678681762.png" alt="img"></strong></p><p><strong>2. 导入配置文件处理器</strong></p><p><strong>spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> <strong>3.编写yml 配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    name: qinjiang</span><br><span class="line">    age: 3</span><br><span class="line">    happy: false</span><br><span class="line">    birth: 2000/01/01</span><br><span class="line">    maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">    lists:</span><br><span class="line">      - code</span><br><span class="line">      - girl</span><br><span class="line">      - music</span><br><span class="line">    dog:</span><br><span class="line">      name: 旺财</span><br><span class="line">      age: 1</span><br></pre></td></tr></table></figure><p> <strong>4.在SpringBoot的主程序的同级目录下建包，只有这样，主程序才会对这些类生效 ； 我们建一个pojo的包放入我们的Person类和Dog类；</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.springbootdemo03.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">@ConfigurationProperties作用：</span><br><span class="line">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="line">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="line">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span><br><span class="line"></span><br><span class="line">只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties功能</span><br><span class="line">*/</span><br><span class="line">@Component //注册bean</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Boolean happy;</span><br><span class="line">    private Date birth;</span><br><span class="line">    private Map&lt;String,Object&gt; maps;</span><br><span class="line">    private List&lt;Object&gt; lists;</span><br><span class="line">    private Dog dog;</span><br><span class="line"></span><br><span class="line">    //get,set方法</span><br><span class="line">    //toString方法</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.springbootdemo03.pojo;</span><br><span class="line"></span><br><span class="line">public class Dog &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    </span><br><span class="line">    //get、set方法</span><br><span class="line">    //toString()方法  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.确认无误后，到测试单元中进行测试，看是否注入成功！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SpringbootDemo03ApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    Person person = new Person();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void contextLoads() &#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728163527890-382471618.png" alt="img"></p><h3 id="唠叨两句"><a href="#唠叨两句" class="headerlink" title="唠叨两句"></a>唠叨两句</h3><p>我们上面采用的方法都是最简单的方式，开发中最常用的；</p><p>那我们来唠唠其他的实现方式，道理都是相同得；写还是那样写；</p><p>配置文件除了yml还有我们之前常用的properties ， 我们没有讲 ， properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>settings–&gt;FileEncodings 中配置；</p><p><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728164337141-1866486258.png" alt="img"></p><p>还有，我们的类和配置文件直接关联着 ， 我们使用的是@configurationProperties的方式，还有一种方式是使用@value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component //注册bean</span><br><span class="line">public class Person &#123;</span><br><span class="line">    //直接使用@value</span><br><span class="line">    @Value(&quot;$&#123;person.name&#125;&quot;) //从配置文件中取值</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;#&#123;11*2&#125;&quot;)  //#&#123;SPEL&#125; Spring表达式</span><br><span class="line">    private Integer age;</span><br><span class="line">    @Value(&quot;true&quot;)  // 字面量</span><br><span class="line">    private Boolean happy;</span><br><span class="line">    </span><br><span class="line">    。。。。。。  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728170012915-2055615871.png" alt="img"></p><p>这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p><p><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728164637719-1038154879.png" alt="img"></p><ul><li> cp只需要写一次即可 ， value则需要每个字段都添加</li><li>松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定</li><li>JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象 ， 使用@value就不支持</li></ul><p> <strong>结论：</strong></p><ul><li>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value</li><li>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@configurationProperties，不要犹豫！</li></ul><h3 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h3><p>spring-boot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component //注册bean</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">@Validated  //数据校验</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    //@Value(&quot;$&#123;person.name&#125;&quot;)</span><br><span class="line">    @Email //name必须是邮箱格式</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong> </p><p> <img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728170423075-754365376.png" alt="img"></p><p><strong>使用数据校验，可以保证数据的正确性；</strong></p><h3 id="加载指定配置文件"><a href="#加载指定配置文件" class="headerlink" title="加载指定配置文件"></a>加载指定配置文件</h3><p> <strong>1. @PropertySource ：</strong>加载指定的配置文件；使用@configurationProperties默认从全局配置文件中获取值；</p><p>我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=kuangshen</span><br></pre></td></tr></table></figure><p>然后在我们的代码中指定加载person.properties文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="line">@Component //注册bean</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><img src="https://img2018.cnblogs.com/blog/1418974/201907/1418974-20190728173752209-1527374517.png" alt="img"></p><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><p><strong>随机数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;、$&#123;random.int(10)&#125;等等</span><br></pre></td></tr></table></figure><p><strong>占位符引用其他属性的值，如果不存在可以设置默认值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    name: qinjiang$&#123;random.uuid&#125;</span><br><span class="line">    age: $&#123;random.int&#125;</span><br><span class="line">    happy: false</span><br><span class="line">    birth: 2000/01/01</span><br><span class="line">    maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">    lists:</span><br><span class="line">      - code</span><br><span class="line">      - girl</span><br><span class="line">      - music</span><br><span class="line">    dog:</span><br><span class="line">      name: $&#123;person.hello:hello&#125;_旺财</span><br><span class="line">      age: 1</span><br></pre></td></tr></table></figure><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p><p><strong>方式一：多配置文件</strong></p><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml ， 用来指定多个环境版本；</p><p>例如：application-test.properties 代表测试环境配置  application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它默认使用application.properties主配置文件；</p><p>我们需要通过一个配置来选择需要激活的环境；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="line">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p><strong>方式二：yml的多文档块</strong></p><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">#选择要激活那个环境块</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: prod</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8083</span><br><span class="line">#配置环境的名称</span><br><span class="line">spring:</span><br><span class="line">  profiles: dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8084</span><br><span class="line">spring:</span><br><span class="line">  profiles: prod  #配置环境的名称javascript:void(0);)</span><br></pre></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a><strong>配置文件加载位置</strong></h3><p><strong>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>**SpringBoot会从这四个位置全部加载主配置文件；*<em>互补配置*<em>；</em></em></p><p><strong>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#配置项目的访问路径</span><br><span class="line">server.servlet.context-path=/kuang</span><br></pre></td></tr></table></figure><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；</p><p>这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</span><br></pre></td></tr></table></figure><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-SpringBoot配置文件以及自动配置原理&quot;&gt;&lt;a href=&quot;#一-SpringBoot配置文件以及自动配置原理&quot; class=&quot;headerlink&quot; title=&quot;一.SpringBoot配置文件以及自动配置原理&quot;&gt;&lt;/a&gt;一.SpringBoot配置</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="后端开发" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Git上传-更新代码</title>
    <link href="http://example.com/2021/11/24/Git%E4%B8%8A%E4%BC%A0-%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2021/11/24/Git%E4%B8%8A%E4%BC%A0-%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-24T03:28:00.000Z</published>
    <updated>2021-11-24T03:34:49.277Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>git init 初始化本地仓库</strong></li><li><strong>使用git remote add origin <a href="https://gitee.com/%E4%BD%A0%E7%9A%84%E7%A0%81%E4%BA%91%E7%94%A8%E6%88%B7%E5%90%8D/XXXX">https://gitee.com/你的码云用户名/XXXX</a> //添加远程仓库</strong></li><li><strong>git pull origin master</strong></li><li><strong>使用git add . （. 表示所有的）或者 git add + 文件名 // 将文件保存到缓存区</strong></li><li><strong>使用git commit -m ‘新添加的文件内容描述’ //添加文件描述</strong></li><li><strong>使用git push origin master ，将本地仓库推送到远程仓库</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git init 初始化本地仓库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用git remote add origin &lt;a href=&quot;https://gitee.com/%E4%BD%A0%E7%9A%84%E7%A0%81%E</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>XiaoXue-小雪 分享一二</title>
    <link href="http://example.com/2021/11/22/XiaoXue-%E5%B0%8F%E9%9B%AA-%E6%B8%A9%E6%9F%94%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
    <id>http://example.com/2021/11/22/XiaoXue-%E5%B0%8F%E9%9B%AA-%E6%B8%A9%E6%9F%94%E7%9A%84%E5%8F%A5%E5%AD%90/</id>
    <published>2021-11-22T10:24:50.000Z</published>
    <updated>2022-06-22T08:54:23.889Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/11/22/XiaoXue-%E5%B0%8F%E9%9B%AA-%E6%B8%A9%E6%9F%94%E7%9A%84%E5%8F%A5%E5%AD%90/%E5%B0%8F%E9%9B%AA.jpg"></p><ol><li><u><strong>“虽然辛苦 我还是会选择那种滚烫的人生 ”</strong></u></li><li><u><strong>岁月很长，人海茫茫，不要回头，不要将就。 跌跌撞撞才明白了许多，舍不得却又无可奈何。 化热烈的妆，见喜欢的人，做向往的梦。 书上说，总有一个人认你觉得人间值得。 给生活一个微笑，道路还在继续。</strong></u></li><li><u><strong>我希望你被打磨 永远光明磊落 我希望你能走过山山水水 写温柔的字 坦荡地爱 我希望你被阅读 不被辜负 你要飘摇着美丽 活得丰盛 或庄重。</strong></u></li><li><u><strong>读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。很多人觉得他们在思考，而实际上他们只是在重新整理自己的偏见。</strong></u></li><li><u><strong>无论你现在多难 能不能去看你想去的风景 都不用担心 你力所能及的地方 一定会带给你预想不到的惊喜 你会遇见一些人觉得相见恨晚 或者遇到一个人觉得在那里值得 这是命 遇见你该遇见的 接受你所不能改变的其实不错 生活的迷人之处 不是如愿以偿 而是阴差阳错。</strong></u></li><li><u><strong>人向前走 苦才会退后</strong></u></li><li><u><strong>你必须培养一些爱好，不要空洞遥远的目标而是实在甚至庸俗的吃喝拉撒。必须一觉醒来很清楚至少今天还能干什么。去楼下最辣的粉店吃早饭，去给窗台上的盆栽浇水，去追一集刚更新的新番，去找一个知心老友唠嗑。你必须积攒这种微小的期待和快乐，这样才不会被遥不可及的梦和无法掌控的爱给拖垮。</strong></u></li><li><u><strong>“ 很荣幸能陪你走过这样一段路，以后你不管是大红大紫还是泯然众人，我都记得在今年的这个暮冬到初春，我见证过你眼里有光并也认为前路有光的时刻。祝你，永远一帆风顺，永远是少年 ”</strong></u></li><li><u><strong>被一个人深深地爱着，将给你力量，而深深地爱着一个人，将给你勇气。</strong></u></li><li><u><strong>外向是生活所需，孤独才是自我享受。</strong></u></li><li><u><strong>生活总会给你答案，但不会马上把一切都告诉你。</strong></u></li><li><u><strong>西蒙娜波伏娃给萨特的《越洋情书》写着：“我渴望能见你一面， 但请你记得， 我不会开口要求要见你。 这不是因为骄傲， 你知道我在你面前毫无骄傲可言， 而是因为， 唯有你也想见我的时候， 我们见面才有意义。”</strong></u></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/11/22/XiaoXue-%E5%B0%8F%E9%9B%AA-%E6%B8%A9%E6%9F%94%E7%9A%84%E5%8F%A5%E5%AD%90/%E5%B0%8F%E9%9B%AA.jpg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;u&gt;&lt;</summary>
      
    
    
    
    <category term="特别场次" scheme="http://example.com/categories/%E7%89%B9%E5%88%AB%E5%9C%BA%E6%AC%A1/"/>
    
    
    <category term="第二场电影" scheme="http://example.com/tags/%E7%AC%AC%E4%BA%8C%E5%9C%BA%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-21》</title>
    <link href="http://example.com/2021/08/21/2021-08-21/"/>
    <id>http://example.com/2021/08/21/2021-08-21/</id>
    <published>2021-08-21T14:37:52.743Z</published>
    <updated>2024-02-03T11:50:33.390Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="不定参数-arguments"><a href="#不定参数-arguments" class="headerlink" title="不定参数 arguments:"></a><strong>不定参数 arguments:</strong></h3><ul><li><strong>他是函数内部的一个成员，只要在函数执行的时候才会存在</strong></li><li><strong>他接收的是传递进来的所有实参</strong></li><li><strong>arguments 拿到的是一个类数组，包含所有的实参，他不影响其它形参的接收</strong></li><li><strong>模板：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//不定参数 [传入参数1,传入参数2,传入参数3]</span></span><br><span class="line">       &#125;</span><br><span class="line">       fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> su = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>[i] === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">                    su += <span class="built_in">arguments</span>[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(su);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum(<span class="number">123</span>, <span class="number">213</span>, <span class="number">32123</span>, <span class="number">213</span>, <span class="number">231</span>, <span class="number">2</span>, <span class="number">321</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>总结：</strong><pre><code>* **总结：不定参数arguments常用于接收实参数量不确定的时候**</code></pre></li></ul><hr><h3 id="不定参数-…rest"><a href="#不定参数-…rest" class="headerlink" title="不定参数 …rest:"></a><strong>不定参数 …rest:</strong></h3><ul><li><strong>…rest 参数</strong></li><li><strong>…rest 剩余的意思，他代表的是剩余参数，用于参数不确定的情况，我们可以使用rest来接受剩下的所有参数</strong></li><li><strong>…rest 接收到的是一个标准的数组，数组里面存放的是所有实参的值</strong></li><li><strong>…rest 参数必须放在最后一个形参的位置</strong></li><li><strong>rest只是一个变量名，这里便于理解，当然换成aaa,bbb,ccc都没问题</strong></li><li><strong>模板：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">num, ...rest</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">            <span class="built_in">console</span>.log(rest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个函数，传入一堆数值，返回数值里面最大的一个值</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> len = rest.length</span><br><span class="line">            <span class="keyword">let</span> max = -<span class="literal">Infinity</span> <span class="comment">//预存一个最小值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rest[i] &gt; max) &#123;</span><br><span class="line">                    max = rest[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findMax(<span class="number">123</span>, <span class="number">132</span>, <span class="number">1321</span>, <span class="number">321123</span>, <span class="number">12</span>, <span class="number">312</span>, <span class="number">31</span>, <span class="number">321</span>, <span class="number">1</span>, <span class="number">321</span>, <span class="number">321</span>, <span class="number">321</span>));</span><br></pre></td></tr></table></figure><hr><h3 id="纯函数："><a href="#纯函数：" class="headerlink" title="纯函数："></a><strong>纯函数：</strong></h3><pre><code>* 函数的执行只依赖于自己内部的参数和变量，最终返回的值不会改变函数外部的值* 这种函数称为纯函数</code></pre><p><strong>举例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补0函数 </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// return String(num)[1] &amp;&amp; String(num) || &#x27;0&#x27; + num</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(num)[<span class="number">1</span>] ? num : <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(padLeft(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h3 id="非纯函数："><a href="#非纯函数：" class="headerlink" title="非纯函数："></a><strong>非纯函数：</strong></h3><p><strong>举例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;IU&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        str = <span class="string">&#x27;李知恩&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">changeStr()</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><hr><h3 id="匿名函数："><a href="#匿名函数：" class="headerlink" title="匿名函数："></a><strong>匿名函数：</strong></h3><ul><li><strong>意如其名，即没有名字的函数</strong></li><li><strong>用()包裹没有命名的函数，表示直接执行这个函数</strong></li></ul><p><strong>举例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="箭头函数："><a href="#箭头函数：" class="headerlink" title="箭头函数："></a><strong>箭头函数：</strong></h3><pre><code>* 一般函数变为箭头函数* 举例：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;函数执行了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改为箭头函数 </span></span><br><span class="line">        <span class="comment">//无变量的情况</span></span><br><span class="line">        <span class="keyword">let</span> fn2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;函数执行了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fn2()</span><br></pre></td></tr></table></figure><h4 id="箭头函数的简写规则："><a href="#箭头函数的简写规则：" class="headerlink" title="箭头函数的简写规则："></a><strong>箭头函数的简写规则：</strong></h4><ul><li><strong>当无形参时，只需将普通函数的 function 和 ( ) 省略为一个括号即可</strong></li><li><strong>当有一个形参时，可直接只保留一个形参</strong></li><li><strong>当有两个及以上参数时，需要完整写为(参数1,参数2,……)的形式</strong></li><li><strong>当只有一条语句时，{}也可以不加 return也要去掉，表示函数直接返回这条语句(<u>所有函数写法都适用这条规则</u>)</strong></li><li><strong>可以使用 ()和,的方式简写代码块(<u>所有函数写法都适用这条规则</u>)</strong></li><li><strong>下面举个栗子：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一个变量的情况</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(num)[<span class="number">1</span>] ? num : <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn3 = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(num)[<span class="number">1</span>] ? num : <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当只有一个参数的时候，可以不加括号</span></span><br><span class="line"><span class="keyword">let</span> fn33 = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(num)[<span class="number">1</span>] ? num : <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当只有一条语句时，&#123;&#125;也可以不加 return也要去掉，表示函数直接返回这条语句</span></span><br><span class="line"><span class="keyword">let</span> fn333 = <span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">String</span>(num)[<span class="number">1</span>] ? num : <span class="string">&#x27;0&#x27;</span> + num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn4 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn4(<span class="number">6</span>, <span class="number">6</span>));</span><br><span class="line"><span class="keyword">let</span> fn6 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> (<span class="built_in">console</span>.log(a, b, <span class="string">&#x27;log执行&#x27;</span>), (a + b) / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fn6(<span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="其他函数："><a href="#其他函数：" class="headerlink" title="其他函数："></a><strong>其他函数：</strong></h3><pre><code>* 除此之外，还有一些特殊的函数* 例如：柯里化函数，递归函数，偏函数，构造函数，闭包函数，通道函数</code></pre><ul><li><strong>下面以柯里化函数举个例子</strong><pre><code>* **柯里化函数，即函数返回函数**   *** 讲得那么高级，实际上就是返回值为一个函数**</code></pre></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//柯里化函数 函数返回函数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">curr</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(x + y);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> fnfn = curr(<span class="number">10</span>)</span><br><span class="line">      fnfn(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">                  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//如何打印出 3 </span></span><br><span class="line"></span><br><span class="line">      fnn()()()</span><br></pre></td></tr></table></figure><hr><h3 id="最后分享一个数组操作方法："><a href="#最后分享一个数组操作方法：" class="headerlink" title="最后分享一个数组操作方法："></a><strong>最后分享一个数组操作方法：</strong></h3><pre><code>* 要求如下：* 原数组 let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]* 要求返回一个新数组，新数组的值，是原来数组每个值下标往后面偏移两个后的值* 期望值 let newArr = [&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;a&#39;,&#39;b&#39;]* 要求不使用数组操作方法</code></pre><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a><strong>代码如下</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">        <span class="keyword">let</span> answer = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> newArr = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                newArr[i] = arr[(i + <span class="number">2</span>) % arr.length]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newArr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(answer(arr));</span><br></pre></td></tr></table></figure><ul><li><strong>具体思路是通过，for循环将每一个下标对印的元素后置两位，若超出数组长度，则置位到起点下标，这里选择使用 % 取余的方法，保证每次循环将最后几个元素，巧妙地分配到前几位。</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;不定参数-arguments&quot;&gt;&lt;a href=&quot;#不定参数-arguments&quot; class=&quot;headerlink&quot; title=&quot;不定参数 arguments:&quot;&gt;&lt;/a&gt;&lt;strong&gt;不定参数 arguments:&lt;/strong&gt;&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-19》</title>
    <link href="http://example.com/2021/08/19/2021-08-19/"/>
    <id>http://example.com/2021/08/19/2021-08-19/</id>
    <published>2021-08-19T15:55:03.058Z</published>
    <updated>2024-02-03T11:50:26.458Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="JS中的特殊循环："><a href="#JS中的特殊循环：" class="headerlink" title="JS中的特殊循环："></a>JS中的特殊循环：</h3><ul><li>for-in循环<ul><li>for-in 是一种特殊的循环 可以循环数组和对象 </li><li>语法： for (let <strong>key</strong>(对应的对象的属性名) in <strong>object</strong>(需要循环的对象或数组)){},</li><li>举个例子:</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;IU&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">                <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//key 为每一个属性名 obj 是对象本身</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`属性名是<span class="subst">$&#123;key&#125;</span>,属性值是<span class="subst">$&#123;obj[key]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="/2021/08/19/2021-08-19/forin.png"></p><ul><li>for-of循环<ul><li>value 对应的是数组里的每一个值,arr 是数组本身</li><li>举个例子：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">           <span class="comment">// value 对应的是数组里的每一个值,arr 是数组本身</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(value);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="/2021/08/19/2021-08-19/forof.png"></p><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><pre><code>* 函数的形参  函数声明的时候接受的参数叫做形参* 函数的实参  函数执行的时候传递的参数叫做实参</code></pre><ul><li>书写方式  function 函数名(形参1,形参2,形参3){}<br> 函数名(实参1,实参2,实参3)<ul><li>形参没有传入实参的时候默认值是undefind</li><li>函数的返回值, 每个函数都一定会有一个返回值</li><li>函数默认的返回值是undefined</li><li>retuen 语句执行代表整个函数执行完成</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;JS中的特殊循环：&quot;&gt;&lt;a href=&quot;#JS中的特殊循环：&quot; class=&quot;headerlink&quot; title=&quot;JS中的特殊循环：&quot;&gt;&lt;/a&gt;JS中的特殊循环：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;for-in循环&lt;ul&gt;
&lt;li&gt;for-in 是一种特殊的循</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-18》</title>
    <link href="http://example.com/2021/08/19/2021-08-18/"/>
    <id>http://example.com/2021/08/19/2021-08-18/</id>
    <published>2021-08-18T16:12:50.423Z</published>
    <updated>2024-02-03T11:50:22.118Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="JS运算符："><a href="#JS运算符：" class="headerlink" title="JS运算符："></a><strong>JS运算符：</strong></h3><ul><li><h4 id="和-的区别以及使用"><a href="#和-的区别以及使用" class="headerlink" title="== 和 === 的区别以及使用"></a>== 和 === 的区别以及使用</h4><ul><li><strong>==用与比较两个数据的值是否相同</strong></li><li><strong>===不仅比较两个数据的值，也会比较类型是否相同</strong></li><li><strong>实际开发中，由于传递的数据类型的考虑，===使用率较高</strong></li></ul></li><li><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><ul><li><p><strong>按位非运算，符号 ~</strong></p></li><li><p><strong>下面先来看看例子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如~<span class="number">1</span>的计算步骤：</span><br><span class="line"></span><br><span class="line">将<span class="number">1</span>(这里叫：原码)转二进制 ＝ <span class="number">00000001</span></span><br><span class="line">按位取反 ＝ <span class="number">11111110</span></span><br><span class="line">发现符号位(即最高位)为<span class="number">1</span>(表示负数)，将除符号位之外的其他数字取反 ＝ <span class="number">10000001</span></span><br><span class="line">末位加<span class="number">1</span>取其补码 ＝ <span class="number">10000010</span></span><br><span class="line">转换回十进制 ＝ -<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>按位取反的运算规则这么奇怪并不是JavaScript独有的，而是所有的计算机语言都是这样的。这样做的主要原因是为了为了统一减法和加法，在计算机中，减法会变成加一个负数，而负数会以补码的形式存储。而这样主要是因为补码和数字的十进制数有这么转换关系，负数：<code>补码(x) = -x - 1</code>，正数：<code>补码(x) = x</code></strong></p></li><li><p><strong>因为补码是针对负数存在的，那么只要数据类型有<code>无符号数</code>，就没有这样的烦恼了，比如C语言有无符号整型，就能对无符号整型直接按位取反。</strong></p></li><li><p><strong>如果没有无符号类型，而且也只是想要按位取反，而不是附带补码的按位取反，需要另外的方法。让全1的数据和当前数据做按位抑或就行了。比如，你有一个32位的数据a，需要对它做按位取反，那么这样就行了：<u><code>0xFFFF ^ a</code></u></strong></p></li><li><p><strong>因为~运算会默认舍去小数部分，因此常用~~来实现去除小数</strong></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;JS运算符：&quot;&gt;&lt;a href=&quot;#JS运算符：&quot; class=&quot;headerlink&quot; title=&quot;JS运算符：&quot;&gt;&lt;/a&gt;&lt;strong&gt;JS运算符：&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;和-的区别以及使用&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>QiXi(七夕):分享一些诗句</title>
    <link href="http://example.com/2021/08/14/QiXi-%E4%B8%83%E5%A4%95-%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E8%AF%97%E5%8F%A5/"/>
    <id>http://example.com/2021/08/14/QiXi-%E4%B8%83%E5%A4%95-%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E8%AF%97%E5%8F%A5/</id>
    <published>2021-08-14T05:59:08.000Z</published>
    <updated>2021-08-14T06:10:28.591Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/14/QiXi-%E4%B8%83%E5%A4%95-%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E8%AF%97%E5%8F%A5/qixi.jpg"></p><p><em>I thought I would be the last <u>shadow</u> in your eyes.</em></p><p>一眼认定你，余生皆是你。</p><p><em>Between the moon and the snow, lies the <u>beauty</u> of you.</em></p><p>月色与雪色之间，你是第三种绝色。</p><p><em>My <u>heart</u> is busy beating for you.</em></p><p>因为你，我的心脏总是忙个不停。</p><p><em>I was determed to <u>travel all over the world</u> until I met you.</em></p><p>我本来是要行走江湖的，但是遇到你，我觉得可以先停一停。</p><p><em>Repost the phrase <u>“lucky dog”</u>， and you‘ll be in a relationship.</em></p><p>转发“幸运儿“这个短语，你就会脱单。</p><p><em>Nothing important lingered in my mind until you <u>appeared</u>.</em></p><p>在你之前，我没有一件像样的心事。</p><p><em>“You are the <u>lovelist</u>”, said I by impulse, and I said again upon consideration.</em></p><p>“你最可爱”，我说时来不及思索，而思索之后，还是这样说。</p><p><em>I have written you name with <u>every pen</u> of mine.</em></p><p>我的每一支笔都知道你的名字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/08/14/QiXi-%E4%B8%83%E5%A4%95-%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E8%AF%97%E5%8F%A5/qixi.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I thought I wo</summary>
      
    
    
    
    <category term="特别场次" scheme="http://example.com/categories/%E7%89%B9%E5%88%AB%E5%9C%BA%E6%AC%A1/"/>
    
    
    <category term="第一场电影" scheme="http://example.com/tags/%E7%AC%AC%E4%B8%80%E5%9C%BA%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-13》</title>
    <link href="http://example.com/2021/08/13/2021-08-13/"/>
    <id>http://example.com/2021/08/13/2021-08-13/</id>
    <published>2021-08-13T14:12:01.363Z</published>
    <updated>2021-08-13T16:30:24.247Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="JS数据在内存中的存储："><a href="#JS数据在内存中的存储：" class="headerlink" title="JS数据在内存中的存储："></a>JS数据在内存中的存储：</h3><p><img src="/2021/08/13/2021-08-13/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8.png"></p><ul><li><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li> 所有基本数据类型都是存放在栈内存里面</li><li> 基本数据类型之间的赋值，直接copy目标变量</li></ul></li><li><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>所有引用数据类型的存储，都是在栈中存入指针(相当于地址)，然后指向堆中的某一块内存，里面有相应的数据</li><li>引用数据类型之间的赋值，是copy目标变量的指针，然后在堆中开辟一块内存空间存储目标指针的堆中数据</li><li>相当于共享文档，分享地址值，每个人能够对文档进行修改，但文档在不同的电脑上需要使用不同的展示方式，相当于开辟新的内存空间</li></ul></li></ul><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>基本数据类型</strong>：声明一个新变量，使用原数据对新数据进行赋值操作，不会影响原数据，因为新数据由原数据参数复制而来</li><li><strong>引用数据类型</strong>：声明一个新变量，使用原数据对新数据进行赋值操作，会影响原数据。因为新数据开辟一块堆内存，其参数是通过原数据指针获取而来的。假如对数据进行更改，会直接修改原数据的堆内存。可以看作，相当于原数据和新数据两者共用同一数据源。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;JS数据在内存中的存储：&quot;&gt;&lt;a href=&quot;#JS数据在内存中的存储：&quot; class=&quot;headerlink&quot; title=&quot;JS数据在内存中的存储：&quot;&gt;&lt;/a&gt;JS数据在内存中的存储：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/13/202</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-12》</title>
    <link href="http://example.com/2021/08/12/2021-08-12/"/>
    <id>http://example.com/2021/08/12/2021-08-12/</id>
    <published>2021-08-12T15:49:35.435Z</published>
    <updated>2021-08-13T15:46:18.852Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数据类型：</p><ul><li>基本类型<ul><li>number 数值类型</li><li>string 字符串类型</li><li>boolean 布尔类型</li><li>undefined 未定义</li><li>null 空值</li><li>symbol 唯一标识符</li><li>bigint 大整数</li></ul></li><li>引用类型<ul><li>object</li></ul></li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><hr><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型:"></a>数值类型:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值类型:标识数字</span></span><br><span class="line"><span class="comment">// 十进制的数值，八进制的数值，十六进制的数值，NaN（计算错误的值）</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">123</span> <span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">012</span> <span class="comment">//八进制的数值，以0开头，和0-7之间任意数字构成的</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="number">0x18f</span> <span class="comment">//十六进制的数值，以0下开头，和0-9 a-f构成的数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line"><span class="keyword">let</span> num4 = ((<span class="number">0.1</span> * <span class="number">10</span>) + (<span class="number">0.2</span> * <span class="number">10</span>)) / <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="number">0</span> / <span class="number">0</span> <span class="comment">// NaN 代表一个无法计算的错误值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="number">6e5</span> <span class="comment">// e表示科学计数法，这里e5指10的5次方</span></span><br><span class="line"><span class="keyword">let</span> num7 = <span class="number">6</span> ** <span class="number">5</span> <span class="comment">// **表示次方，这里6**5表示6的5次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number.MAX_VALUE 表示js能展示的最大数值</span></span><br><span class="line"><span class="comment">//（-）Infinity 无限大，正向（反向）溢出的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num5); <span class="comment">//typeof 用于返回数据的类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE);</span><br></pre></td></tr></table></figure><hr><h4 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写通过 &quot;&quot; 或者 &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，`` 是es6新增的字符串方式，叫做模板字符串</span></span><br><span class="line"><span class="comment">// 模板字符串里面可以拼接变量 语法：$&#123;变量名&#125;</span></span><br><span class="line"><span class="comment">// 内部可以自由书写 &quot;&quot; 和 &#x27;&#x27; 不用担心转义问题，非常好用             </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;李知恩&quot;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;IU说：&quot;</span></span><br><span class="line"><span class="keyword">let</span> say1 = <span class="string">&#x27;IU说：&quot;不要看别的女生&quot;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> say2 = <span class="string">`<span class="subst">$&#123;str&#125;</span>&quot;不然她要吃醋了&quot;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = say2.length <span class="comment">//.length用于获取字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(say2[<span class="number">5</span>]);<span class="comment">//获取字符串的某一个值</span></span><br></pre></td></tr></table></figure><hr><h4 id="布尔类型："><a href="#布尔类型：" class="headerlink" title="布尔类型："></a>布尔类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean 布尔类型</span></span><br><span class="line"><span class="keyword">let</span> bol = <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h4 id="未定义类型："><a href="#未定义类型：" class="headerlink" title="未定义类型："></a>未定义类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//undefined 未定义</span></span><br><span class="line"><span class="comment">//变量声明没有定义就是 undefined    也可以手动定义</span></span><br><span class="line"><span class="keyword">let</span> und = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><hr><h4 id="空值类型："><a href="#空值类型：" class="headerlink" title="空值类型："></a>空值类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//null 代表空值，代表这个变量没有存储任何东西</span></span><br><span class="line"><span class="keyword">let</span> aa = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(aa);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> aa); <span class="comment">// null 的类型为object</span></span><br></pre></td></tr></table></figure><hr><h4 id="唯一标识符："><a href="#唯一标识符：" class="headerlink" title="唯一标识符："></a>唯一标识符：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//symbol 唯一标识符</span></span><br><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sym1 === sym2); <span class="comment">//Symbol永不相等 无法比较</span></span><br></pre></td></tr></table></figure><hr><h4 id="大整数型："><a href="#大整数型：" class="headerlink" title="大整数型："></a>大整数型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bigint 存储一个能超过最大值限制的值 常用于解决精度缺失的问题</span></span><br><span class="line"><span class="comment">//最大限制值只能 和同类型的值相加</span></span><br><span class="line"><span class="keyword">let</span> bigNumber1 = <span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line"><span class="keyword">let</span> bigNumber2 = bigNumber1 + <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(bigNumber1 === bigNumber2); <span class="comment">//返回值为true，因为不能突破最大值上限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Number</span>.MAX_SAFE_INTEGER <span class="comment">//最大安全值</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">BigInt</span>(a)</span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">BigInt</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b + c);</span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><hr><h4 id="对象类型："><a href="#对象类型：" class="headerlink" title="对象类型："></a>对象类型：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">         object 对象</span></span><br><span class="line"><span class="comment">         对象可以当做是一个数据的集合  , 可以存放任意数据类型</span></span><br><span class="line"><span class="comment">         格式 数据名(变量/键名):数据值(值可以是任意类型 / 键值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量创建</span></span><br><span class="line"><span class="keyword">let</span> IU = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;李知恩&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">fred</span> : [<span class="string">&#x27;IU1&#x27;</span>,<span class="string">&#x27;IU2&#x27;</span>,<span class="string">&#x27;IU3&#x27;</span>,<span class="string">&#x27;IU4&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(IU)</span><br><span class="line"><span class="comment">// 对象的取值</span></span><br><span class="line"><span class="comment">//方式一 : 通过对象.属性名 的方式取值</span></span><br><span class="line"><span class="built_in">console</span>.log(IU.name)</span><br><span class="line"><span class="comment">//方式二: 通过下标的方式取值 对象[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> obname = <span class="string">&quot;fred&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(IU[<span class="string">&#x27;age&#x27;</span>]) </span><br><span class="line"><span class="built_in">console</span>.log(IU[obname])</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的赋值和修改值</span></span><br><span class="line">luyao.name = <span class="string">&quot;IU李知恩&quot;</span></span><br><span class="line">luyao[<span class="string">&quot;sex&quot;</span>] = <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(IU)</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求拿到朱雀</span></span><br><span class="line"><span class="built_in">console</span>.log(IU.fred[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// arr 数组类型</span></span><br><span class="line">   <span class="comment">//方式一 : 通过包装对象的方式创建</span></span><br><span class="line">   <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="string">&#x27;ni&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">   <span class="comment">//方式二:字面量的方式创建数组</span></span><br><span class="line">   <span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="string">&quot;ni&quot;</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="string">&quot;哈哈&quot;</span>]</span><br><span class="line">   <span class="built_in">console</span>.log(arr2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 数组的简单操作</span></span><br><span class="line">   <span class="comment">//数组取值  通过下标的方式取值 , 值是从0开始计算</span></span><br><span class="line">   <span class="keyword">let</span> hah = arr2[<span class="number">4</span>]</span><br><span class="line">   <span class="comment">//获取数组的长度</span></span><br><span class="line">   <span class="built_in">console</span>.log(arr2.length) <span class="comment">// 获取数组的长度</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> getARr = arr2[<span class="number">5</span>]</span><br><span class="line">   <span class="built_in">console</span>.log(getARr) <span class="comment">// 取的值超出数组长度拿到的就是undefined</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//数组更改或者新增值</span></span><br><span class="line">   arr2[<span class="number">5</span>] = <span class="string">&#x27;我是新增的值&#x27;</span></span><br><span class="line">   arr2[<span class="number">1</span>] = <span class="number">666</span></span><br><span class="line">   <span class="built_in">console</span>.log(arr2)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="comment">// 二维数组</span></span><br><span class="line">   <span class="built_in">console</span>.log(arr3[<span class="number">3</span>][<span class="number">0</span>]) <span class="comment">// 多维数组的取值也是一样的取值方式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr2) <span class="comment">//object</span></span><br></pre></td></tr></table></figure><hr><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 函数</span></span><br><span class="line"><span class="comment">// 函数就是一组语句的集合，他是一个独立运行的程序单元，在js里面函数是非常重要的东西</span></span><br><span class="line"><span class="comment">// 函数通过 函数体 还有一堆的 组合语句 构成</span></span><br><span class="line"><span class="comment">//函数的定义 function 函数名()&#123;</span></span><br><span class="line"><span class="comment">//  函数体代码</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//定义一个函数名字叫fn</span></span><br><span class="line">    <span class="comment">//函数体的书写</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;函数执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型&lt;ul&gt;
&lt;li&gt;number 数值类型&lt;/li&gt;
&lt;li&gt;string 字符串类型&lt;/li&gt;
&lt;li&gt;boolean 布尔类型&lt;/li&gt;
&lt;li&gt;undefined 未定义&lt;/li&gt;
&lt;li&gt;null 空值&lt;/li&gt;</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>《个人日报:2021-08-11》</title>
    <link href="http://example.com/2021/08/11/2021-08-11/"/>
    <id>http://example.com/2021/08/11/2021-08-11/</id>
    <published>2021-08-11T14:41:45.651Z</published>
    <updated>2021-08-13T15:46:08.306Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="声明变量："><a href="#声明变量：" class="headerlink" title="声明变量："></a>声明变量：</h4><ul><li><p><strong>var let const</strong> </p><ul><li><p><strong>var 早期程序员在没有let const出现前一律使用var 现已淘汰 不在建议使用 易引起歧义</strong></p></li><li><p><strong>let 用于声明变量，可多次赋值</strong></p></li><li><p><strong>const 用以声明常量，定义后不再允许赋值，否则会报错</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError: Unexpected identifier</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>其中，使用var 对同一个变量进行二次声明，不会报错，而是覆盖前一次的值。但是使用let则会报错</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError: Identifier &#x27;name&#x27; has already been declared</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串拼接："><a href="#字符串拼接：" class="headerlink" title="字符串拼接："></a><strong>字符串拼接：</strong></h4><ul><li><strong>直接通过 + 拼接</strong></li></ul><h4 id="字符串转义："><a href="#字符串转义：" class="headerlink" title="字符串转义："></a><strong>字符串转义：</strong></h4><ul><li><p><strong>直接通过单双引号（”   ’ ‘   ‘’）嵌套使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iu = <span class="string">&#x27;IU说:&quot;她吃醋我了&quot;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> IU = <span class="string">&quot;IU说:&#x27;她吃醋我了&#x27;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通过转移符号如 反斜杠将后一个字符取消逻辑意义</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iU = <span class="string">&#x27;IU说:\&#x27;她吃我醋了\&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>输出结果：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IU说:&#x27;她吃我醋了&#x27;</span><br><span class="line">IU说:&quot;她吃我醋了&quot;</span><br><span class="line">IU说:&#x27;她吃我醋了&#x27;</span><br></pre></td></tr></table></figure><hr><p><strong>关于HarmonyOS系统开发：</strong></p><ul><li><strong>一套app项目能够运行在所有配备了HarmonyOS系统的设备上</strong></li><li><strong>目前支持两种语言进行开发-Java和JavaScript，其中HarmonyOS开发类似于小程序的语法，其生命周期的开发模式可借鉴于Vue的框架</strong></li><li><strong>支持虚拟机运行以及远近程真机调试，只不过需要使用华为账号</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h4 id=&quot;声明变量：&quot;&gt;&lt;a href=&quot;#声明变量：&quot; class=&quot;headerlink&quot; title=&quot;声明变量：&quot;&gt;&lt;/a&gt;声明变量：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;var let const&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="文章" scheme="http://example.com/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="个人日报" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
</feed>
